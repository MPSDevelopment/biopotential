<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:websocket="http://www.springframework.org/schema/websocket" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/websocket
        http://www.springframework.org/schema/websocket/spring-websocket.xsd">


	<import resource="spring-security.xml" />

	<context:component-scan base-package="com.mpsdevelopment.biopotential.server.db" />
	<context:component-scan base-package="com.mpsdevelopment.biopotential.server.db.dao" />
	<context:component-scan base-package="com.mpsdevelopment.biopotential.server.scheduler" />

    

	<bean id="persistUtils" class="com.mpsdevelopment.biopotential.server.db.PersistUtils" init-method="configureSessionFactory" autowire="byName" />
	
	<bean id="sessionManager" class="com.mpsdevelopment.biopotential.server.db.SessionManager" autowire="byName" />
<!-- 	<bean id="securityUtils" class="com.mpsdevelopment.biopotential.server.utils.SecurityUtils" autowire="byName" /> -->

	<bean id="springContextHolder" class="com.mpsdevelopment.biopotential.server.SpringContextHolder" />

	<bean id="databaseCreator" class="com.mpsdevelopment.biopotential.server.db.DatabaseCreator" init-method="initialization" />

    <bean id="tokenUtils" class="com.mpsdevelopment.biopotential.server.utils.TokenUtils" />

	<bean id="sessionAdviceBean" class="com.mpsdevelopment.biopotential.server.db.advice.SessionAdvice" />
	<bean id="annotationSessionAdviceBean" class="com.mpsdevelopment.biopotential.server.db.advice.AnnotationSessionAdvice" />
<!-- 	<bean id="protectedApiSessionAdvice" class="com.mpsdevelopment.biopotential.server.db.advice.ProtectedApiSessionAdvice" /> -->

	<bean id="userDao" class="com.mpsdevelopment.biopotential.server.db.dao.UserDao" />
	<bean id="foldersDao" class="com.mpsdevelopment.biopotential.server.db.dao.FoldersDao" />
	<bean id="patternsDao" class="com.mpsdevelopment.biopotential.server.db.dao.PatternsDao" />
	<bean id="foldersPatternsDao" class="com.mpsdevelopment.biopotential.server.db.dao.PatternsFoldersDao" />
	<bean id="visitDao" class="com.mpsdevelopment.biopotential.server.db.dao.VisitDao" />
    <bean id="selectFromDbPanelController" class="com.mpsdevelopment.biopotential.server.gui.diagnostics.subpanels.SelectFromDbPanelController" />
    <bean id="diagPanelController" class="com.mpsdevelopment.biopotential.server.gui.diagnostics.DiagPanelController" />
    <bean id="automaticsPanelController" class="com.mpsdevelopment.biopotential.server.gui.diagnostics.subpanels.AutomaticsPanelController" />
    <bean id="analysisPanelController" class="com.mpsdevelopment.biopotential.server.gui.analysis.AnalysisPanelController" />
    <bean id="visitsController" class="com.mpsdevelopment.biopotential.server.controller.VisitsController" />



	<bean id="usersControllerProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean id="usersController" class="com.mpsdevelopment.biopotential.server.controller.UsersController" />
		</property>
		<property name="interceptorNames">
			<list>
				<value>annotationSessionAdviceBean</value>
<!-- 				<value>protectedApiSessionAdvice</value> -->
			</list>
		</property>
	</bean>

	<bean id="usersServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="target">
			<bean id="usersService" class="com.mpsdevelopment.biopotential.server.service.UsersService" />
		</property>
		<property name="interceptorNames">
			<list>
				<value>annotationSessionAdviceBean</value>
			</list>
		</property>
	</bean>




	<!-- This bean we need for uploading file from http client -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- max upload size in bytes -->
		<property name="maxUploadSize" value="500000000" />
		<!-- max size of file in memory (in bytes) -->
		<property name="maxInMemorySize" value="500000000" />
	</bean>
	<mvc:annotation-driven />

	<!-- <aop:aspectj-autoproxy /> -->

	<!-- тег для описания Расписаний (timer) -->
	<task:annotation-driven executor="executor" scheduler="scheduler" />
	<task:executor id="executor" pool-size="5" />
	<task:scheduler id="scheduler" pool-size="10" />



</beans>